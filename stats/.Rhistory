idx_d4 =behavedata$Testday=="post-training"
tmp_d1 = behavedata[idx_d1,]
tmp_d4 = behavedata[idx_d4,]
behavedata_train = tmp_d1
behavedata_train$Sensitivity_TrEfct = tmp_d4$Sensitivity - tmp_d1$Sensitivity
behavedata_train$Criterion_TrEfct = tmp_d4$Criterion - tmp_d1$Criterion
behavedata_train$LikelihoodRatio_TrEfct = tmp_d4$LikelihoodRatio - tmp_d1$LikelihoodRatio
behavedata_train$correct_TrEfct = tmp_d4$correct - tmp_d1$correct
behavedata_train$RT_TrEfct = tmp_d4$RT - tmp_d1$RT
behavedata_train$RT_STD_TrEfct = tmp_d4$RT_STD - tmp_d1$RT_STD
behavedata_train$IE_TrEfct = tmp_d4$InverseEfficiency - tmp_d1$InverseEfficiency
measure = "RT_TrEfct"
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space", measure]
datuse
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback",]))
cat('\nSpace Cue \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space", ]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
cat('\nFeat Cue \n')
datuse = behavedata[behavedata['Attention.Type']=="Feature",]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nFeat Cue \n')
datuse = behavedata[behavedata['Attention.Type']=="Feature",]
cat('\nNF')
datuse
datuse = behavedata_train[behavedata_train['Attention.Type']=="Feature",]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
cat('\nOverall \n')
datuse = behavedata_train
cat('\nNF')
print(ttestBF(formula = formula, data = datuse[datuse['NFTraining']=="Neurofeedback",]))
cat('\nOverall \n')
datuse = behavedata_train
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
measure = "Sensitivity_TrEfct"
cat('\nSpace Cue \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space", ]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
cat('\nFeat Cue \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Feature",]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
followuptests2 <-function(behavedata_train, measure){
cat('\nSpace Cue \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space", ]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
cat('\nFeat Cue \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Feature",]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
cat('\nOverall \n')
datuse = behavedata_train
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
}
followuptests3 <-function(behavedata, formula1, formula2){
cat('\nSpace Cue Training Effects \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space",]
cat('\nNF V Sham \n')
print(ttestBF(formula = formula1, data = datuse))
cat('\nSpace V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Space" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Space \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Space"),]
levels(tmpdat$AttentionTrained) = c(1,1,2)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeat Cue Training Effects \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Feature",]
print(ttestBF(formula = formula1, data = datuse))
cat('\nNF V Sham \n')
print(ttestBF(formula = formula1, data = datuse))
cat('\nSpace V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Space" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Space \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Space"),]
levels(tmpdat$AttentionTrained) = c(1,1,2)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nOverallTraining Effects \n')
datuse = behavedata_train
print(ttestBF(formula = formula1, data = datuse))
cat('\nNF V Sham \n')
print(ttestBF(formula = formula1, data = datuse))
cat('\nSpace V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Space" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Space \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Space"),]
levels(tmpdat$AttentionTrained) = c(1,1,2)
print(ttestBF(formula = formula2 , data = tmpdat))
}
datuse_train = behavedata_train
DisplayANOVAResults2X2(formula = Sensitivity_TrEfct ~ NFTraining * Attention.Type + subID , data=datuse_train, maineffectstringA = "Neurofeedback Group:", maineffectstringB = "Cue Type:")
followuptests2(behavedata_train, Sensitivity_TrEfct)
followuptests2(behavedata_train, "Sensitivity_TrEfct")
followuptests2(behavedata_train,  "RT_TrEfct")
DisplayANOVAResults2X2(formula = Criterion_TrEfct ~ NFTraining * Attention.Type + subID , data=datuse_train, maineffectstringA = "Neurofeedback Group:", maineffectstringB = "Cue Type:")
followuptests2(behavedata_train, "Criterion_TrEfct")
# visualise result:
image = load.image(paste(direct.resultsRoot, "Motion Task Sensitivity by Day pre Vs. post NF Space task.png", sep = ""))
plot(image, axes=FALSE)
# Run Stats
dat = Runstats_NFvsSham(behavedata, taskstring = 'Space', measure='Sensitivity')
followuptests3(behavedata, Sensitivity_TrEfct ~ NFTraining, Sensitivity_TrEfct ~ AttentionTrained)
followuptests3(behavedata, RT_TrEfct ~ NFTraining, RT_TrEfct ~ AttentionTrained)
measure = "Sensitivity_TrEfct"
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space", ]
anovaBF(formula = Sensitivity ~ Testday + subID, data = behavedata_[behavedata['Attention.Type']=="Space",], whichRandom = subID)
anovaBF(formula = Sensitivity ~ Testday + subID, data = behavedata[behavedata['Attention.Type']=="Space",], whichRandom = subID)
anovaBF(formula = Sensitivity ~ Testday + SubID, data = behavedata[behavedata['Attention.Type']=="Space",], whichRandom = SubID)
anovaBF(formula = Sensitivity ~ Testday + SubID, data = behavedata[behavedata['Attention.Type']=="Space",], whichRandom = SubID)behavedata[behavedata['Attention.Type']=="Space",]
behavedata[behavedata['Attention.Type']=="Space",]
bf = anovaBF(formula = Sensitivity ~ Testday + SubID, data = behavedata[behavedata['Attention.Type']=="Space",], whichRandom = SubID)
behavedata_train[behavedata_train['Attention.Type']=="Space",]
data$Sensitivity
data
behavedata_train[behavedata_train['Attention.Type']=="Space",]$Testday
vedata, formula1, formula2){
datuse = behavedata[behavedata['Attention.Type']=="Space",]
datuse
behavedata['Attention.Type']
behavedata
direct.Root = "//data.qbi.uq.edu.au/VISATTNNF-Q1357/"
direct.resultsRoot = paste(direct.Root, "Results/CompareSpaceFeat/group/", sep = "")
# load data
behavedata = read.csv("//data.qbi.uq.edu.au/VISATTNNF-Q1357/Results/CompareSpaceFeat/group/motiondiscrim_behaveresults_ALL.csv")
#### create factors
behavedata_orig = behavedata
behavedata$AttentionTrained = factor(behavedata$AttentionTrained)
levels(behavedata$AttentionTrained) = c( "Feature", "Sham","Space")
behavedata$NFTraining = behavedata$AttentionTrained
levels(behavedata$NFTraining) = c( "Neurofeedback", "Sham","Neurofeedback")
behavedata$Attention.Type = factor(behavedata$Attention.Type)
levels(behavedata$Attention.Type) = c( "Feature", "Space")
behavedata$Testday = factor(behavedata$Testday)
levels(behavedata$Testday) = c( "pre-training", "post-training")
behavedata$subID = factor(behavedata$subID)
#### Calculate training effects
idx_d1 =behavedata$Testday=="pre-training"
idx_d4 =behavedata$Testday=="post-training"
tmp_d1 = behavedata[idx_d1,]
tmp_d4 = behavedata[idx_d4,]
behavedata_train = tmp_d1
behavedata_train$Sensitivity_TrEfct = tmp_d4$Sensitivity - tmp_d1$Sensitivity
behavedata_train$Criterion_TrEfct = tmp_d4$Criterion - tmp_d1$Criterion
behavedata_train$LikelihoodRatio_TrEfct = tmp_d4$LikelihoodRatio - tmp_d1$LikelihoodRatio
behavedata_train$correct_TrEfct = tmp_d4$correct - tmp_d1$correct
behavedata_train$RT_TrEfct = tmp_d4$RT - tmp_d1$RT
behavedata_train$RT_STD_TrEfct = tmp_d4$RT_STD - tmp_d1$RT_STD
behavedata_train$IE_TrEfct = tmp_d4$InverseEfficiency - tmp_d1$InverseEfficiency
datuse = behavedata[behavedata['Attention.Type']=="Space",]
datuse
datuse
behavedata['Attention.Type']
behavedata_train
behavedata
datuse = behavedata[behavedata['Attention.Type']=="Space",]
bf = anovaBF(formula = Sensitivity ~ Testday + SubID, data = datuse, whichRandom = SubID)
datuse
datuse$Sensitivity
datuse$Testday
datuse$subID
anovaBF(formula = Sensitivity ~ Testday + SubID, data = datuse, whichRandom = SubID)
bf = anovaBF(formula = Sensitivity ~ Testday + SubID, data = datuse, whichRandom = "SubID")
datuse = behavedata[behavedata['Attention.Type']=="Space",]
anovaBF(formula = Sensitivity ~ Testday + SubID, data = datuse, whichRandom = "SubID")
bf = anovaBF(Sensitivity ~ Testday + SubID, data=datuse, whichRandom = "subID")
bf = anovaBF(Sensitivity ~ Testday + SubID, data=datuse, whichRandom = "SubID")
bf = anovaBF(Sensitivity ~ Testday + subID, data=datuse, whichRandom = "subID")
bf
datuse = behavedata[behavedata['Attention.Type']=="Space",]
bf = anovaBF(Sensitivity ~ Testday + subID, data=datuse, whichRandom = "subID")
bf
datuse[datuse['NFTraining']=="Neurofeedback",]
datuse = behavedata[behavedata['Attention.Type']=="Space",]
bf = anovaBF(Sensitivity ~ Testday + subID, data=datuse[datuse['NFTraining']=="Neurofeedback",], whichRandom = "subID")
print(bf)
datuse = behavedata[behavedata['Attention.Type']=="Space",]
bf = anovaBF(Sensitivity ~ Testday + subID, data=datuse[datuse['NFTraining']=="Sham",], whichRandom = "subID")
print(bf)
cat('\nSpace Cue \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space", ]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
datuse = behavedata[behavedata['Attention.Type']=="Space",]
bf = anovaBF(Sensitivity ~ Testday + subID, data=datuse[datuse['NFTraining']=="Sham",], whichRandom = "subID")
print(bf)
datuse = behavedata[behavedata['Attention.Type']=="Space",]
bf = anovaBF(Sensitivity ~ Testday + subID, data=datuse[datuse['AttentionTrained']=="Feature",], whichRandom = "subID")
print(bf)
datuse = behavedata[behavedata['Attention.Type']=="Space",]
bf = anovaBF(Sensitivity ~ Testday + subID, data=datuse[datuse['AttentionTrained']=="Sham",], whichRandom = "subID")
print(bf)
cat('\nSpace Cue \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space", ]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
cat('\nSpace Cue Training Effects \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space",]
cat('\nNF V Sham \n')
print(ttestBF(formula = formula1, data = datuse))
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space",]
cat('\nSpace Cue Training Effects \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space",]
tmpdat = datuse[datuse$AttentionTrained %in% c("Space" ,"Sham"),]
tmpdat
tmpdat
datuse
datuse
tmpdat
tmpdat$AttentionTrained = factor(tmpdat$AttentionTrained)
levels(tmpdat$AttentionTrained)
print(ttestBF(formula = Sensitivity_TrEfct ~ AttentionTrained , data = tmpdat))
t.test( Sensitivity_TrEfct ~ AttentionTrained , data = tmpdat, var.eq=TRUE)
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = Sensitivity_TrEfct ~ AttentionTrained , data = tmpdat))
t.test( Sensitivity_TrEfct ~ AttentionTrained , data = tmpdat, var.eq=TRUE)
t.test( Sensitivity_TrEfct ~ AttentionTrained , data = tmpdat)
t.test( Sensitivity_TrEfct ~ AttentionTrained , data = tmpdat, var.eq=TRUE)
plot( Sensitivity_TrEfct ~ AttentionTrained , data = tmpdat)
library(dplyr)
library(BayesFactor)
library(imager)
#reference for Bayesian Anova method applied here: Rouder et al 2012.
# https://www.sciencedirect.com/science/article/pii/S0022249612000806?casa_token=7qVp7duocU0AAAAA:isxnVW-Oi6-62_oaPg-PJx1oPB4uNliU9GsP__W_bAOFozswKTky_VH9mq94omHGQb9yWyUKxU7g
# setup directories
direct.Root = "//data.qbi.uq.edu.au/VISATTNNF-Q1357/"
direct.resultsRoot = paste(direct.Root, "Results/CompareSpaceFeat/group/", sep = "")
# load data
behavedata = read.csv("//data.qbi.uq.edu.au/VISATTNNF-Q1357/Results/CompareSpaceFeat/group/motiondiscrim_behaveresults_ALL.csv")
#### create factors
behavedata_orig = behavedata
behavedata$AttentionTrained = factor(behavedata$AttentionTrained)
levels(behavedata$AttentionTrained) = c( "Feature", "Sham","Space")
behavedata$NFTraining = behavedata$AttentionTrained
levels(behavedata$NFTraining) = c( "Neurofeedback", "Sham","Neurofeedback")
behavedata$Attention.Type = factor(behavedata$Attention.Type)
levels(behavedata$Attention.Type) = c( "Feature", "Space")
behavedata$Testday = factor(behavedata$Testday)
levels(behavedata$Testday) = c( "pre-training", "post-training")
behavedata$subID = factor(behavedata$subID)
#### Calculate training effects
idx_d1 =behavedata$Testday=="pre-training"
idx_d4 =behavedata$Testday=="post-training"
tmp_d1 = behavedata[idx_d1,]
tmp_d4 = behavedata[idx_d4,]
behavedata_train = tmp_d1
behavedata_train$Sensitivity_TrEfct = tmp_d4$Sensitivity - tmp_d1$Sensitivity
behavedata_train$Criterion_TrEfct = tmp_d4$Criterion - tmp_d1$Criterion
behavedata_train$LikelihoodRatio_TrEfct = tmp_d4$LikelihoodRatio - tmp_d1$LikelihoodRatio
behavedata_train$correct_TrEfct = tmp_d4$correct - tmp_d1$correct
behavedata_train$RT_TrEfct = tmp_d4$RT - tmp_d1$RT
behavedata_train$RT_STD_TrEfct = tmp_d4$RT_STD - tmp_d1$RT_STD
behavedata_train$IE_TrEfct = tmp_d4$InverseEfficiency - tmp_d1$InverseEfficiency
##### define functions to display 2x2 BF ANOVA results and followups
DisplayANOVAResults2X2 <- function(formula, data, maineffectstringA, maineffectstringB) {
bf = anovaBF(formula , data=data, whichRandom="subID",  whichModels="all")
bfInteraction = bf[7]/bf[4] # is the full model better than just strait main effects?
bf_main_A = bf[7]/bf[5] # is the full model better than the main effect A knock out?
bf_main_B = bf[7]/bf[6] # is the full model better than the main effect B knock out?
# display results
print(bf)
cat('\n\nInteraction:\n\n')
print(bfInteraction)
cat(paste('\n\n', maineffectstringA, '\n\n'))
print(bf_main_A)
cat(paste('\n\n', maineffectstringB, '\n\n'))
print(bf_main_B)
return(bf)
}
Runstats_NFvsSham <- function(behavedata, taskstring, measure) {
# get data for measure and task
datuse = behavedata[behavedata$Attention.Type %in% taskstring,]
datuse["measure"] = datuse[measure]
# get data for conditions of interest
datuse_NF = datuse[datuse['NFTraining']=="Neurofeedback",]
datuse_sham = datuse [datuse ['NFTraining']=="Sham",]
# get Marginals
dat = datuse%>% group_by(NFTraining, Testday)
# run stats
cat("ANOVA\n\n")
bf = DisplayANOVAResults2X2(measure ~ NFTraining * Testday + subID , data=datuse, maineffectstringA = "Neurofeedback Group:",         maineffectstringB = "Test Day:")
if (measure == "Sensitivity"){
bfInteraction = bf[7]/bf[4]
newbf = recompute(bfInteraction , iterations = 500000)
cat('\n\n Interaction value resampled to reduce error')
print(newbf)
}
# Run followup stats
# cat("\n\nFollowup Tests")
# followuptests(measure ~  Testday, dataA = datuse_NF, dataB = datuse_sham)
return(dat)
}
# followuptests <- function(formula, dataA, dataB) {
#   bf = ttestBF(formula = formula, data = dataA)
#   cat('\n\nNeurofeedback Group Pre Vs. Post\n\n')
#   print(bf)
#
#   cat('\n\nSham Group Pre Vs. Post\n\n')
#   bf = ttestBF(formula = formula, data = dataB)
#   print(bf)
# }
followuptests2 <-function(behavedata_train, measure){
#
# datuse = behavedata[behavedata['Attention.Type']=="Space",]
# bf = anovaBF(Sensitivity ~ Testday + subID, data=datuse[datuse['AttentionTrained']=="Sham",], whichRandom = "subID")
# print(bf)
cat('\nSpace Cue \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space", ]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
cat('\nFeat Cue \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Feature",]
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
cat('\nOverall \n')
datuse = behavedata_train
cat('\nNF')
print(ttestBF(x = datuse[datuse['NFTraining']=="Neurofeedback", measure]))
cat('\nSham')
print(ttestBF(x = datuse[datuse['NFTraining']=="Sham", measure]))
cat('\nSpace')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Space", measure]))
cat('\nFeat')
print(ttestBF(x = datuse[datuse['AttentionTrained']=="Feature", measure]))
}
followuptests3 <-function(behavedata, formula1, formula2){
cat('\nSpace Cue Training Effects \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Space",]
cat('\nNF V Sham \n')
print(ttestBF(formula = formula1, data = datuse))
cat('\nSpace V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Space" ,"Sham"),]
tmpdat$AttentionTrained = factor(tmpdat$AttentionTrained)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Space \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Space"),]
levels(tmpdat$AttentionTrained) = c(1,1,2)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeat Cue Training Effects \n')
datuse = behavedata_train[behavedata_train['Attention.Type']=="Feature",]
print(ttestBF(formula = formula1, data = datuse))
cat('\nNF V Sham \n')
print(ttestBF(formula = formula1, data = datuse))
cat('\nSpace V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Space" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Space \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Space"),]
levels(tmpdat$AttentionTrained) = c(1,1,2)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nOverallTraining Effects \n')
datuse = behavedata_train
print(ttestBF(formula = formula1, data = datuse))
cat('\nNF V Sham \n')
print(ttestBF(formula = formula1, data = datuse))
cat('\nSpace V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Space" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Sham \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Sham"),]
levels(tmpdat$AttentionTrained) = c(1,2,1)
print(ttestBF(formula = formula2 , data = tmpdat))
cat('\nFeature V Space \n')
tmpdat = datuse[datuse$AttentionTrained %in% c("Feature" ,"Space"),]
levels(tmpdat$AttentionTrained) = c(1,1,2)
print(ttestBF(formula = formula2 , data = tmpdat))
}
datuse_train = behavedata_train
DisplayANOVAResults2X2(formula = Sensitivity_TrEfct ~ NFTraining * Attention.Type + subID , data=datuse_train, maineffectstringA = "Neurofeedback Group:", maineffectstringB = "Cue Type:")
followuptests2(behavedata_train, "Sensitivity_TrEfct")
DisplayANOVAResults2X2(formula = RT_TrEfct ~ NFTraining * Attention.Type + subID , data=datuse_train, maineffectstringA = "Neurofeedback Group:", maineffectstringB = "Cue Type:")
DisplayANOVAResults2X2(formula = RT_TrEfct ~ NFTraining * Attention.Type + subID , data=datuse_train, maineffectstringA = "Neurofeedback Group:", maineffectstringB = "Cue Type:")
datuse_train
View(tmp_d1)
library(dplyr)
library(BayesFactor)
library(imager)
#reference for Bayesian Anova method applied here: Rouder et al 2012.
# https://www.sciencedirect.com/science/article/pii/S0022249612000806?casa_token=7qVp7duocU0AAAAA:isxnVW-Oi6-62_oaPg-PJx1oPB4uNliU9GsP__W_bAOFozswKTky_VH9mq94omHGQb9yWyUKxU7g
# setup directories
direct.Root = "//data.qbi.uq.edu.au/VISATTNNF-Q1357/"
direct.resultsRoot = paste(direct.Root, "Results/CompareSpaceFeat/group/", sep = "")
# load data
behavedata = read.csv("//data.qbi.uq.edu.au/VISATTNNF-Q1357/Results/CompareSpaceFeat/group/motiondiscrim_behaveresults_ALL.csv")
#### create factors
behavedata_orig = behavedata
behavedata$AttentionTrained = factor(behavedata$AttentionTrained)
levels(behavedata$AttentionTrained) = c( "Feature", "Sham","Space")
behavedata$NFTraining = behavedata$AttentionTrained
levels(behavedata$NFTraining) = c( "Neurofeedback", "Sham","Neurofeedback")
behavedata$Attention.Type = factor(behavedata$Attention.Type)
levels(behavedata$Attention.Type) = c( "Feature", "Space")
behavedata$Testday = factor(behavedata$Testday)
levels(behavedata$Testday) = c( "pre-training", "post-training")
behavedata$subID = factor(behavedata$subID)
#### Calculate training effects
idx_d1 =behavedata$Testday=="pre-training"
idx_d4 =behavedata$Testday=="post-training"
tmp_d1 = behavedata[idx_d1,]
tmp_d4 = behavedata[idx_d4,]
behavedata_train = tmp_d1
behavedata_train$Sensitivity_TrEfct = tmp_d4$Sensitivity - tmp_d1$Sensitivity
behavedata_train$Criterion_TrEfct = tmp_d4$Criterion - tmp_d1$Criterion
behavedata_train$LikelihoodRatio_TrEfct = tmp_d4$LikelihoodRatio - tmp_d1$LikelihoodRatio
behavedata_train$correct_TrEfct = tmp_d4$correct - tmp_d1$correct
behavedata_train$RT_TrEfct = tmp_d4$RT - tmp_d1$RT
behavedata_train$RT_STD_TrEfct = tmp_d4$RT_STD - tmp_d1$RT_STD
behavedata_train$IE_TrEfct = tmp_d4$InverseEfficiency - tmp_d1$InverseEfficiency
followuptests2(behavedata_train, "Sensitivity_TrEfct")
datuse_train = behavedata_train
DisplayANOVAResults2X2(formula = Sensitivity_TrEfct ~ NFTraining * Attention.Type + subID , data=datuse_train, maineffectstringA = "Neurofeedback Group:", maineffectstringB = "Cue Type:")
# Run Stats
dat = Runstats_NFvsSham(behavedata, taskstring = 'Space', measure='Sensitivity')
